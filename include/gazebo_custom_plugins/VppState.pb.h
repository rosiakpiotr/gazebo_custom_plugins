// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VppState.proto

#ifndef PROTOBUF_INCLUDED_VppState_2eproto
#define PROTOBUF_INCLUDED_VppState_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_VppState_2eproto 

namespace protobuf_VppState_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_VppState_2eproto
namespace mav_msgs {
namespace msgs {
class VppState;
class VppStateDefaultTypeInternal;
extern VppStateDefaultTypeInternal _VppState_default_instance_;
}  // namespace msgs
}  // namespace mav_msgs
namespace google {
namespace protobuf {
template<> ::mav_msgs::msgs::VppState* Arena::CreateMaybeMessage<::mav_msgs::msgs::VppState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mav_msgs {
namespace msgs {

// ===================================================================

class VppState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mav_msgs.msgs.VppState) */ {
 public:
  VppState();
  virtual ~VppState();

  VppState(const VppState& from);

  inline VppState& operator=(const VppState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VppState(VppState&& from) noexcept
    : VppState() {
    *this = ::std::move(from);
  }

  inline VppState& operator=(VppState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VppState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VppState* internal_default_instance() {
    return reinterpret_cast<const VppState*>(
               &_VppState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VppState* other);
  friend void swap(VppState& a, VppState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VppState* New() const final {
    return CreateMaybeMessage<VppState>(NULL);
  }

  VppState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VppState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VppState& from);
  void MergeFrom(const VppState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VppState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double thrust = 1;
  bool has_thrust() const;
  void clear_thrust();
  static const int kThrustFieldNumber = 1;
  double thrust() const;
  void set_thrust(double value);

  // required double torque = 2;
  bool has_torque() const;
  void clear_torque();
  static const int kTorqueFieldNumber = 2;
  double torque() const;
  void set_torque(double value);

  // required double aoa = 3;
  bool has_aoa() const;
  void clear_aoa();
  static const int kAoaFieldNumber = 3;
  double aoa() const;
  void set_aoa(double value);

  // required double pitch = 4;
  bool has_pitch() const;
  void clear_pitch();
  static const int kPitchFieldNumber = 4;
  double pitch() const;
  void set_pitch(double value);

  // required double rpm = 5;
  bool has_rpm() const;
  void clear_rpm();
  static const int kRpmFieldNumber = 5;
  double rpm() const;
  void set_rpm(double value);

  // required double airspeed = 6;
  bool has_airspeed() const;
  void clear_airspeed();
  static const int kAirspeedFieldNumber = 6;
  double airspeed() const;
  void set_airspeed(double value);

  // required double advance_ratio = 7;
  bool has_advance_ratio() const;
  void clear_advance_ratio();
  static const int kAdvanceRatioFieldNumber = 7;
  double advance_ratio() const;
  void set_advance_ratio(double value);

  // required double motor_index = 8;
  bool has_motor_index() const;
  void clear_motor_index();
  static const int kMotorIndexFieldNumber = 8;
  double motor_index() const;
  void set_motor_index(double value);

  // @@protoc_insertion_point(class_scope:mav_msgs.msgs.VppState)
 private:
  void set_has_thrust();
  void clear_has_thrust();
  void set_has_torque();
  void clear_has_torque();
  void set_has_aoa();
  void clear_has_aoa();
  void set_has_pitch();
  void clear_has_pitch();
  void set_has_rpm();
  void clear_has_rpm();
  void set_has_airspeed();
  void clear_has_airspeed();
  void set_has_advance_ratio();
  void clear_has_advance_ratio();
  void set_has_motor_index();
  void clear_has_motor_index();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double thrust_;
  double torque_;
  double aoa_;
  double pitch_;
  double rpm_;
  double airspeed_;
  double advance_ratio_;
  double motor_index_;
  friend struct ::protobuf_VppState_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VppState

// required double thrust = 1;
inline bool VppState::has_thrust() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VppState::set_has_thrust() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VppState::clear_has_thrust() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VppState::clear_thrust() {
  thrust_ = 0;
  clear_has_thrust();
}
inline double VppState::thrust() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.thrust)
  return thrust_;
}
inline void VppState::set_thrust(double value) {
  set_has_thrust();
  thrust_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.thrust)
}

// required double torque = 2;
inline bool VppState::has_torque() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VppState::set_has_torque() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VppState::clear_has_torque() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VppState::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline double VppState::torque() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.torque)
  return torque_;
}
inline void VppState::set_torque(double value) {
  set_has_torque();
  torque_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.torque)
}

// required double aoa = 3;
inline bool VppState::has_aoa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VppState::set_has_aoa() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VppState::clear_has_aoa() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VppState::clear_aoa() {
  aoa_ = 0;
  clear_has_aoa();
}
inline double VppState::aoa() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.aoa)
  return aoa_;
}
inline void VppState::set_aoa(double value) {
  set_has_aoa();
  aoa_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.aoa)
}

// required double pitch = 4;
inline bool VppState::has_pitch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VppState::set_has_pitch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VppState::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VppState::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double VppState::pitch() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.pitch)
  return pitch_;
}
inline void VppState::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.pitch)
}

// required double rpm = 5;
inline bool VppState::has_rpm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VppState::set_has_rpm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VppState::clear_has_rpm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VppState::clear_rpm() {
  rpm_ = 0;
  clear_has_rpm();
}
inline double VppState::rpm() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.rpm)
  return rpm_;
}
inline void VppState::set_rpm(double value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.rpm)
}

// required double airspeed = 6;
inline bool VppState::has_airspeed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VppState::set_has_airspeed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VppState::clear_has_airspeed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VppState::clear_airspeed() {
  airspeed_ = 0;
  clear_has_airspeed();
}
inline double VppState::airspeed() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.airspeed)
  return airspeed_;
}
inline void VppState::set_airspeed(double value) {
  set_has_airspeed();
  airspeed_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.airspeed)
}

// required double advance_ratio = 7;
inline bool VppState::has_advance_ratio() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VppState::set_has_advance_ratio() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VppState::clear_has_advance_ratio() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VppState::clear_advance_ratio() {
  advance_ratio_ = 0;
  clear_has_advance_ratio();
}
inline double VppState::advance_ratio() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.advance_ratio)
  return advance_ratio_;
}
inline void VppState::set_advance_ratio(double value) {
  set_has_advance_ratio();
  advance_ratio_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.advance_ratio)
}

// required double motor_index = 8;
inline bool VppState::has_motor_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VppState::set_has_motor_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VppState::clear_has_motor_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VppState::clear_motor_index() {
  motor_index_ = 0;
  clear_has_motor_index();
}
inline double VppState::motor_index() const {
  // @@protoc_insertion_point(field_get:mav_msgs.msgs.VppState.motor_index)
  return motor_index_;
}
inline void VppState::set_motor_index(double value) {
  set_has_motor_index();
  motor_index_ = value;
  // @@protoc_insertion_point(field_set:mav_msgs.msgs.VppState.motor_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace mav_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_VppState_2eproto
